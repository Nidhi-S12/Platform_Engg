name: Deploy Golden Path - EC2 Instance

on:
  workflow_dispatch:
    inputs:
      golden_path:
        description: 'Golden Path Selection'
        required: true
        default: 'gp1'
        type: choice
        options:
          - gp1
      instance_type:
        description: 'EC2 Instance Type'
        required: true
        default: 't2.micro'
        type: choice
        options:
          - t2.micro
          - t2.small
          - t2.medium
      app_type:
        description: 'Application Type'
        required: true
        default: 'nodejs'
        type: choice
        options:
          - nodejs
          - python
          - static
      repo_url:
        description: 'Application Repository URL'
        required: true
        type: string
      cleanup_after_deployment:
        description: 'Cleanup resources after deployment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  repository_dispatch:
    types: [deploy-golden-path]

env:
  AWS_DEFAULT_REGION: us-east-1
  TF_VAR_instance_type: ${{ github.event.inputs.instance_type || github.event.client_payload.instance_type || 't2.micro' }}
  TF_VAR_app_type: ${{ github.event.inputs.app_type || github.event.client_payload.app_type || 'nodejs' }}
  TF_VAR_repo_url: ${{ github.event.inputs.repo_url || github.event.client_payload.repo_url }}
  TF_VAR_instance_name: "GP1-${{ github.run_number }}"

jobs:
  terraform-deploy:
    name: 🏗️ Provision Infrastructure
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.terraform.outputs.instance_ip }}
      instance_id: ${{ steps.terraform.outputs.instance_id }}
      ssh_key_name: ${{ steps.terraform.outputs.ssh_key_name }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false
      
      - name: 🔧 Terraform Init
        run: |
          cd terraform-root/modules/ec2
          terraform init
      
      - name: 📋 Terraform Plan
        run: |
          cd terraform-root/modules/ec2
          terraform plan \
            -var="instance_type=${{ env.TF_VAR_instance_type }}" \
            -var="app_type=${{ env.TF_VAR_app_type }}" \
            -var="repo_url=${{ env.TF_VAR_repo_url }}" \
            -var="instance_name=${{ env.TF_VAR_instance_name }}" \
            -out=tfplan
      
      - name: 🚀 Terraform Apply
        id: terraform
        run: |
          cd terraform-root/modules/ec2
          terraform apply -auto-approve tfplan
          
          # Get outputs
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          INSTANCE_ID=$(terraform output -raw instance_id)
          SSH_KEY_NAME=$(terraform output -raw key_pair_name)
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "ssh_key_name=$SSH_KEY_NAME" >> $GITHUB_OUTPUT
          
          echo "### 🎉 Infrastructure Provisioned Successfully" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Instance ID** | \`$INSTANCE_ID\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Public IP** | \`$INSTANCE_IP\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Instance Type** | \`${{ env.TF_VAR_instance_type }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Application Type** | \`${{ env.TF_VAR_app_type }}\` |" >> $GITHUB_STEP_SUMMARY

  deploy-application:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: success()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 🔑 Get SSH Private Key
        id: get_key
        run: |
          # Get private key from SSM Parameter Store
          aws ssm get-parameter \
            --name "/${{ env.TF_VAR_instance_name }}/private-key" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text > private_key.pem
          
          chmod 600 private_key.pem
          echo "SSH key retrieved successfully"
      
      - name: ⏰ Wait for Instance
        run: |
          echo "Waiting for EC2 instance to be ready..."
          aws ec2 wait instance-status-ok --instance-ids ${{ needs.terraform-deploy.outputs.instance_id }}
          echo "Instance is ready!"
      
      - name: 🔧 Deploy Application
        run: |
          # Wait for SSH to be available
          echo "Testing SSH connectivity..."
          for i in {1..30}; do
            if ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@${{ needs.terraform-deploy.outputs.instance_ip }} "echo 'SSH connection successful'"; then
              echo "SSH connection established"
              break
            fi
            echo "Attempt $i: SSH not ready, waiting 10 seconds..."
            sleep 10
          done
          
          # Copy deployment script to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ec2-user@${{ needs.terraform-deploy.outputs.instance_ip }}:/home/ec2-user/
          
          # Run deployment script
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.terraform-deploy.outputs.instance_ip }} \
            "chmod +x /home/ec2-user/deploy.sh && /home/ec2-user/deploy.sh --repo-url '${{ env.TF_VAR_repo_url }}' --app-type '${{ env.TF_VAR_app_type }}'"
      
      - name: 🧪 Test Deployment
        run: |
          # Determine the port based on app type
          case "${{ env.TF_VAR_app_type }}" in
            "nodejs") PORT=3000 ;;
            "python") PORT=5000 ;;
            "static") PORT=80 ;;
            *) PORT=3000 ;;
          esac
          
          echo "Testing application on port $PORT..."
          
          # Wait for application to start
          sleep 30
          
          # Test the application
          if curl -f --max-time 10 "http://${{ needs.terraform-deploy.outputs.instance_ip }}:$PORT"; then
            echo "✅ Application is responding successfully!"
            
            echo "### 🎉 Deployment Completed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Access Your Application:**" >> $GITHUB_STEP_SUMMARY
            echo "- **URL:** http://${{ needs.terraform-deploy.outputs.instance_ip }}:$PORT" >> $GITHUB_STEP_SUMMARY
            echo "- **SSH:** \`ssh -i ${{ needs.terraform-deploy.outputs.ssh_key_name }}.pem ec2-user@${{ needs.terraform-deploy.outputs.instance_ip }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 **Deployment Details:**" >> $GITHUB_STEP_SUMMARY
            echo "- **Repository:** ${{ env.TF_VAR_repo_url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Application Type:** ${{ env.TF_VAR_app_type }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Instance Type:** ${{ env.TF_VAR_instance_type }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Instance ID:** ${{ needs.terraform-deploy.outputs.instance_id }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Application may not be fully ready yet. Check the logs manually."
            
            echo "### ⚠️ Deployment Status" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure deployed successfully, but application may need more time to start." >> $GITHUB_STEP_SUMMARY
            echo "- **SSH into instance:** \`ssh -i ${{ needs.terraform-deploy.outputs.ssh_key_name }}.pem ec2-user@${{ needs.terraform-deploy.outputs.instance_ip }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Check logs:** \`tail -f /home/ec2-user/app/app.log\`" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-on-failure:
    name: 🧹 Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [terraform-deploy, deploy-application]
    if: always() && (needs.terraform-deploy.result == 'failure' || needs.deploy-application.result == 'failure') && (github.event.inputs.cleanup_after_deployment == 'true' || github.event.client_payload.cleanup_after_deployment == 'true')
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false
      
      - name: 🧹 Terraform Destroy
        run: |
          cd terraform-root/modules/ec2
          terraform init
          terraform destroy -auto-approve \
            -var="instance_type=${{ env.TF_VAR_instance_type }}" \
            -var="app_type=${{ env.TF_VAR_app_type }}" \
            -var="repo_url=${{ env.TF_VAR_repo_url }}" \
            -var="instance_name=${{ env.TF_VAR_instance_name }}"
          
          echo "### 🧹 Cleanup Completed" >> $GITHUB_STEP_SUMMARY
          echo "Resources have been cleaned up due to deployment failure." >> $GITHUB_STEP_SUMMARY
